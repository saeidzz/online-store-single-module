/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ir.rabbit.group.onlinestore.controller;

import io.swagger.annotations.*;
import ir.rabbit.group.onlinestore.dto.product.Product;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-04-26T13:31:08.886Z")

@Api(value = "product", description = "the product API")
public interface ProductApi {

    @ApiOperation(value = "Add a new product to the store", nickname = "addProduct", notes = "", tags = {"product",})
    @ApiResponses(value = {
            @ApiResponse(code = 405, message = "Invalid input")})
    @RequestMapping(value = "/product",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Void> addProduct(@ApiParam(value = "product object that needs to be added to the store", required = true) @Valid @RequestBody Product body);


    @ApiOperation(value = "Deletes a product", nickname = "deleteProduct", notes = "", tags = {"product",})
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Product not found")})
    @RequestMapping(value = "/product/{productId}",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProduct(@ApiParam(value = "Product id to delete", required = true) @PathVariable("productId") Long productId);


    @ApiOperation(value = "Finds Product by title", nickname = "findProductByTitle", notes = "", response = Product.class, responseContainer = "List", tags = {"product",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Product.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Invalid title value")})
    @RequestMapping(value = "/product/findByTitle",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Product>> findProductByTitle(@NotNull @ApiParam(value = "input title should be longer than 3 chars", required = true) @Valid @RequestParam(value = "status", required = true) String status);


    @ApiOperation(value = "Finds products by tags", nickname = "findProductsByTags", notes = "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.", response = Product.class, responseContainer = "List", tags = {"product",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Product.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Invalid tag value")})
    @RequestMapping(value = "/product/findByCategory",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Product>> findProductsByTags(@NotNull @ApiParam(value = "Tags to filter by", required = true) @Valid @RequestParam(value = "tags", required = true) List<String> tags);


    @ApiOperation(value = "Find product by ID", nickname = "getProductById", notes = "Returns a single customer", response = Product.class, tags = {"product",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Product.class),
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "product not found")})
    @RequestMapping(value = "/product/{productId}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Product> getProductById(@ApiParam(value = "ID of product to return", required = true) @PathVariable("productId") Long productId);


    @ApiOperation(value = "Update an existing product", nickname = "updateProduct", notes = "", tags = {"product",})
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "product not found"),
            @ApiResponse(code = 405, message = "Validation exception")})
    @RequestMapping(value = "/product",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Void> updateProduct(@ApiParam(value = "product object that needs to be updated in the store", required = true) @Valid @RequestBody Product body);


    @ApiOperation(value = "uploads an image", nickname = "uploadFile", notes = "", tags = {"product",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation")})
    @RequestMapping(value = "/product/{productId}/uploadImage",
            produces = {"application/json"},
            consumes = {"multipart/form-data"},
            method = RequestMethod.POST)
    ResponseEntity<Void> uploadFile(@ApiParam(value = "ID of product to update", required = true) @PathVariable("productId") Long productId, @ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile file);

}
